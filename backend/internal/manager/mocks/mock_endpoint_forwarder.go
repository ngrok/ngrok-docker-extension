// Code generated by MockGen. DO NOT EDIT.
// Source: golang.ngrok.com/ngrok/v2 (interfaces: EndpointForwarder)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_endpoint_forwarder.go -package=mocks golang.ngrok.com/ngrok/v2 EndpointForwarder
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	tls "crypto/tls"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	ngrok "golang.ngrok.com/ngrok/v2"
)

// MockEndpointForwarder is a mock of EndpointForwarder interface.
type MockEndpointForwarder struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointForwarderMockRecorder
	isgomock struct{}
}

// MockEndpointForwarderMockRecorder is the mock recorder for MockEndpointForwarder.
type MockEndpointForwarderMockRecorder struct {
	mock *MockEndpointForwarder
}

// NewMockEndpointForwarder creates a new mock instance.
func NewMockEndpointForwarder(ctrl *gomock.Controller) *MockEndpointForwarder {
	mock := &MockEndpointForwarder{ctrl: ctrl}
	mock.recorder = &MockEndpointForwarderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointForwarder) EXPECT() *MockEndpointForwarderMockRecorder {
	return m.recorder
}

// Agent mocks base method.
func (m *MockEndpointForwarder) Agent() ngrok.Agent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Agent")
	ret0, _ := ret[0].(ngrok.Agent)
	return ret0
}

// Agent indicates an expected call of Agent.
func (mr *MockEndpointForwarderMockRecorder) Agent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Agent", reflect.TypeOf((*MockEndpointForwarder)(nil).Agent))
}

// AgentTLSTermination mocks base method.
func (m *MockEndpointForwarder) AgentTLSTermination() *tls.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentTLSTermination")
	ret0, _ := ret[0].(*tls.Config)
	return ret0
}

// AgentTLSTermination indicates an expected call of AgentTLSTermination.
func (mr *MockEndpointForwarderMockRecorder) AgentTLSTermination() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentTLSTermination", reflect.TypeOf((*MockEndpointForwarder)(nil).AgentTLSTermination))
}

// Bindings mocks base method.
func (m *MockEndpointForwarder) Bindings() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bindings")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Bindings indicates an expected call of Bindings.
func (mr *MockEndpointForwarderMockRecorder) Bindings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bindings", reflect.TypeOf((*MockEndpointForwarder)(nil).Bindings))
}

// Close mocks base method.
func (m *MockEndpointForwarder) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEndpointForwarderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEndpointForwarder)(nil).Close))
}

// CloseWithContext mocks base method.
func (m *MockEndpointForwarder) CloseWithContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWithContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWithContext indicates an expected call of CloseWithContext.
func (mr *MockEndpointForwarderMockRecorder) CloseWithContext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWithContext", reflect.TypeOf((*MockEndpointForwarder)(nil).CloseWithContext), arg0)
}

// Description mocks base method.
func (m *MockEndpointForwarder) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockEndpointForwarderMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockEndpointForwarder)(nil).Description))
}

// Done mocks base method.
func (m *MockEndpointForwarder) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockEndpointForwarderMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockEndpointForwarder)(nil).Done))
}

// ID mocks base method.
func (m *MockEndpointForwarder) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockEndpointForwarderMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockEndpointForwarder)(nil).ID))
}

// Metadata mocks base method.
func (m *MockEndpointForwarder) Metadata() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(string)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockEndpointForwarderMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockEndpointForwarder)(nil).Metadata))
}

// PoolingEnabled mocks base method.
func (m *MockEndpointForwarder) PoolingEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoolingEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PoolingEnabled indicates an expected call of PoolingEnabled.
func (mr *MockEndpointForwarderMockRecorder) PoolingEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoolingEnabled", reflect.TypeOf((*MockEndpointForwarder)(nil).PoolingEnabled))
}

// Protocol mocks base method.
func (m *MockEndpointForwarder) Protocol() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Protocol")
	ret0, _ := ret[0].(string)
	return ret0
}

// Protocol indicates an expected call of Protocol.
func (mr *MockEndpointForwarderMockRecorder) Protocol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocol", reflect.TypeOf((*MockEndpointForwarder)(nil).Protocol))
}

// ProxyProtocol mocks base method.
func (m *MockEndpointForwarder) ProxyProtocol() ngrok.ProxyProtoVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyProtocol")
	ret0, _ := ret[0].(ngrok.ProxyProtoVersion)
	return ret0
}

// ProxyProtocol indicates an expected call of ProxyProtocol.
func (mr *MockEndpointForwarderMockRecorder) ProxyProtocol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyProtocol", reflect.TypeOf((*MockEndpointForwarder)(nil).ProxyProtocol))
}

// TrafficPolicy mocks base method.
func (m *MockEndpointForwarder) TrafficPolicy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrafficPolicy")
	ret0, _ := ret[0].(string)
	return ret0
}

// TrafficPolicy indicates an expected call of TrafficPolicy.
func (mr *MockEndpointForwarderMockRecorder) TrafficPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrafficPolicy", reflect.TypeOf((*MockEndpointForwarder)(nil).TrafficPolicy))
}

// URL mocks base method.
func (m *MockEndpointForwarder) URL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MockEndpointForwarderMockRecorder) URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockEndpointForwarder)(nil).URL))
}

// UpstreamProtocol mocks base method.
func (m *MockEndpointForwarder) UpstreamProtocol() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpstreamProtocol")
	ret0, _ := ret[0].(string)
	return ret0
}

// UpstreamProtocol indicates an expected call of UpstreamProtocol.
func (mr *MockEndpointForwarderMockRecorder) UpstreamProtocol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpstreamProtocol", reflect.TypeOf((*MockEndpointForwarder)(nil).UpstreamProtocol))
}

// UpstreamTLSClientConfig mocks base method.
func (m *MockEndpointForwarder) UpstreamTLSClientConfig() *tls.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpstreamTLSClientConfig")
	ret0, _ := ret[0].(*tls.Config)
	return ret0
}

// UpstreamTLSClientConfig indicates an expected call of UpstreamTLSClientConfig.
func (mr *MockEndpointForwarderMockRecorder) UpstreamTLSClientConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpstreamTLSClientConfig", reflect.TypeOf((*MockEndpointForwarder)(nil).UpstreamTLSClientConfig))
}

// UpstreamURL mocks base method.
func (m *MockEndpointForwarder) UpstreamURL() url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpstreamURL")
	ret0, _ := ret[0].(url.URL)
	return ret0
}

// UpstreamURL indicates an expected call of UpstreamURL.
func (mr *MockEndpointForwarderMockRecorder) UpstreamURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpstreamURL", reflect.TypeOf((*MockEndpointForwarder)(nil).UpstreamURL))
}
