// Code generated by MockGen. DO NOT EDIT.
// Source: internal/manager/dependency_interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/manager/dependency_interfaces.go -destination=internal/manager/mocks/dependency_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/docker/docker/api/types"
	detectproto "github.com/ngrok/ngrok-docker-extension/internal/detectproto"
	gomock "go.uber.org/mock/gomock"
	ngrok "golang.ngrok.com/ngrok/v2"
)

// MockNgrokSDK is a mock of NgrokSDK interface.
type MockNgrokSDK struct {
	ctrl     *gomock.Controller
	recorder *MockNgrokSDKMockRecorder
	isgomock struct{}
}

// MockNgrokSDKMockRecorder is the mock recorder for MockNgrokSDK.
type MockNgrokSDKMockRecorder struct {
	mock *MockNgrokSDK
}

// NewMockNgrokSDK creates a new mock instance.
func NewMockNgrokSDK(ctrl *gomock.Controller) *MockNgrokSDK {
	mock := &MockNgrokSDK{ctrl: ctrl}
	mock.recorder = &MockNgrokSDKMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNgrokSDK) EXPECT() *MockNgrokSDKMockRecorder {
	return m.recorder
}

// NewAgent mocks base method.
func (m *MockNgrokSDK) NewAgent(agentOpts ...ngrok.AgentOption) (ngrok.Agent, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range agentOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewAgent", varargs...)
	ret0, _ := ret[0].(ngrok.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAgent indicates an expected call of NewAgent.
func (mr *MockNgrokSDKMockRecorder) NewAgent(agentOpts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAgent", reflect.TypeOf((*MockNgrokSDK)(nil).NewAgent), agentOpts...)
}

// MockDockerClient is a mock of DockerClient interface.
type MockDockerClient struct {
	ctrl     *gomock.Controller
	recorder *MockDockerClientMockRecorder
	isgomock struct{}
}

// MockDockerClientMockRecorder is the mock recorder for MockDockerClient.
type MockDockerClientMockRecorder struct {
	mock *MockDockerClient
}

// NewMockDockerClient creates a new mock instance.
func NewMockDockerClient(ctrl *gomock.Controller) *MockDockerClient {
	mock := &MockDockerClient{ctrl: ctrl}
	mock.recorder = &MockDockerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerClient) EXPECT() *MockDockerClientMockRecorder {
	return m.recorder
}

// ContainerInspect mocks base method.
func (m *MockDockerClient) ContainerInspect(ctx context.Context, containerID string) (types.ContainerJSON, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerInspect", ctx, containerID)
	ret0, _ := ret[0].(types.ContainerJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerInspect indicates an expected call of ContainerInspect.
func (mr *MockDockerClientMockRecorder) ContainerInspect(ctx, containerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerInspect", reflect.TypeOf((*MockDockerClient)(nil).ContainerInspect), ctx, containerID)
}

// MockProtocolDetector is a mock of ProtocolDetector interface.
type MockProtocolDetector struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolDetectorMockRecorder
	isgomock struct{}
}

// MockProtocolDetectorMockRecorder is the mock recorder for MockProtocolDetector.
type MockProtocolDetectorMockRecorder struct {
	mock *MockProtocolDetector
}

// NewMockProtocolDetector creates a new mock instance.
func NewMockProtocolDetector(ctrl *gomock.Controller) *MockProtocolDetector {
	mock := &MockProtocolDetector{ctrl: ctrl}
	mock.recorder = &MockProtocolDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtocolDetector) EXPECT() *MockProtocolDetectorMockRecorder {
	return m.recorder
}

// Detect mocks base method.
func (m *MockProtocolDetector) Detect(ctx context.Context, host, port string) (*detectproto.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detect", ctx, host, port)
	ret0, _ := ret[0].(*detectproto.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detect indicates an expected call of Detect.
func (mr *MockProtocolDetectorMockRecorder) Detect(ctx, host, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detect", reflect.TypeOf((*MockProtocolDetector)(nil).Detect), ctx, host, port)
}
